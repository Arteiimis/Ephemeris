#ifdef CUDA_IMPL

#define CONST_TABLE static __device__ const
#define STATIC_FUNCTION static __device__
#define FUNCTION __device__
#define SUM_FUNCTION cuda_sum

#else

#define CONST_TABLE static const
#define STATIC_FUNCTION static
#define FUNCTION
#define SUM_FUNCTION sum

#endif
#ifndef USE_NEW_GEOPOTENTIAL
//static const int_t Precompute_Table_size[1+Max_N]={0, 0, 10, 25, 46, 74, 110, 155, 210};
STATIC_FUNCTION int_t Precompute_Table_size(int_t n){
    return (n-1)*(36+n*(10+n))/6;
}

#if 0

template<const int_t n>
fast_mpvec sum_n(const fast_mpvec &r,const fast_mpvec *cn){
    int_t np=n+1,cp=0;
    fast_real xbase(1);
    fast_mpvec an(0);
    for(int_t px=0;px<=np;++px){
        fast_real ybase(xbase);
        for(int_t py=0;py<=np-px;++py){
            fast_real zbase(ybase);
            for(int_t pz=0;pz<np-px-py;++pz)zbase*=r.z;
            an+=zbase*cn[cp];
            ++cp;

            ybase*=r.y;
        }
        xbase*=r.x;
    }
    return an;
}

static const uint8_t j_table[]={1,2,1,2,4,0,4,1,2,4,1,2,1,2,1,4,0,4,0,1,2,1,4,0,1,1,2,1,2,1,2,4,0,4,0,4,1,2,1,2,4,0,4,1,2,4,1,2,1,2,1,2,1,4,0,4,0,4,0,1,2,1,2,1,4,0,4,0,1,2,1,4,0,1,1,2,1,2,1,2,1,2,4,0,4,0,4,0,4,1,2,1,2,1,2,4,0,4,0,4,1,2,1,2,4,0,4,1,2,4,1,2,1,2,1,2,1,2,1,4,0,4,0,4,0,4,0,1,2,1,2,1,2,1,4,0,4,0,4,0,1,2,1,2,1,4,0,4,0,1,2,1,4,0,1,1,2,1,2,1,2,1,2,1,2,4,0,4,0,4,0,4,0,4,1,2,1,2,1,2,1,2,4,0,4,0,4,0,4,1,2,1,2,1,2,4,0,4,0,4,1,2,1,2,4,0,4,1,2,4};
//summation over only terms include Jn coefficients
template<const int_t n>
fast_mpvec sum_Jn(const fast_mpvec &r,const fast_mpvec *cn){
    int_t np=n+1,cp=0;
    fast_real xbase(1);
    fast_mpvec an(0);
    const uint8_t *jt=j_table+Precompute_Table_size(n-1);
    for(int_t px=0;px<=np;++px){
        fast_real ybase(xbase);
        for(int_t py=0;py<=np-px;++py){
            fast_real zbase(ybase);
            for(int_t pz=0;pz<np-px-py;++pz)zbase*=r.z;
            if(jt[cp]&4)an.x+=zbase*cn[cp].x;
            if(jt[cp]&2)an.y+=zbase*cn[cp].y;
            if(jt[cp]&1)an.z+=zbase*cn[cp].z;
            ++cp;

            ybase*=r.y;
        }
        xbase*=r.x;
    }
    return an;
}

static fast_mpvec(*const sum_Jn_funlist[])(const fast_mpvec &,const fast_mpvec *)={
    nullptr,nullptr,
    sum_Jn<int_t(2)>,
    sum_Jn<int_t(3)>,
    sum_Jn<int_t(4)>,
    sum_Jn<int_t(5)>,
    sum_Jn<int_t(6)>,
    sum_Jn<int_t(7)>,
    sum_Jn<int_t(8)>
};

static fast_mpvec(*const sum_n_funlist[])(const fast_mpvec &,const fast_mpvec *)={
    nullptr,nullptr,
    sum_n<int_t(2)>,
    sum_n<int_t(3)>,
    sum_n<int_t(4)>,
    sum_n<int_t(5)>,
    sum_n<int_t(6)>,
    sum_n<int_t(7)>,
    sum_n<int_t(8)>
};

#else
STATIC_FUNCTION fast_mpvec sum_2(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);an+=base2.z*cn[0];an+=base0.y*base1.z*cn[1];an+=base1.y*base0.z*cn[2];an+=base2.y*cn[3];an+=base0.x*base1.z*cn[4];an+=base0.x*base0.y*base0.z*cn[5];an+=base0.x*base1.y*cn[6];an+=base1.x*base0.z*cn[7];an+=base1.x*base0.y*cn[8];an+=base2.x*cn[9];return an;
}

STATIC_FUNCTION fast_mpvec sum_3(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);an+=base3.z*cn[0];an+=base0.y*base2.z*cn[1];an+=base1.y*base1.z*cn[2];an+=base2.y*base0.z*cn[3];an+=base3.y*cn[4];an+=base0.x*base2.z*cn[5];an+=base0.x*base0.y*base1.z*cn[6];an+=base0.x*base1.y*base0.z*cn[7];an+=base0.x*base2.y*cn[8];an+=base1.x*base1.z*cn[9];an+=base1.x*base0.y*base0.z*cn[10];an+=base1.x*base1.y*cn[11];an+=base2.x*base0.z*cn[12];an+=base2.x*base0.y*cn[13];an+=base3.x*cn[14];return an;
}

STATIC_FUNCTION fast_mpvec sum_4(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);an+=base4.z*cn[0];an+=base0.y*base3.z*cn[1];an+=base1.y*base2.z*cn[2];an+=base2.y*base1.z*cn[3];an+=base3.y*base0.z*cn[4];an+=base4.y*cn[5];an+=base0.x*base3.z*cn[6];an+=base0.x*base0.y*base2.z*cn[7];an+=base0.x*base1.y*base1.z*cn[8];an+=base0.x*base2.y*base0.z*cn[9];an+=base0.x*base3.y*cn[10];an+=base1.x*base2.z*cn[11];an+=base1.x*base0.y*base1.z*cn[12];an+=base1.x*base1.y*base0.z*cn[13];an+=base1.x*base2.y*cn[14];an+=base2.x*base1.z*cn[15];an+=base2.x*base0.y*base0.z*cn[16];an+=base2.x*base1.y*cn[17];an+=base3.x*base0.z*cn[18];an+=base3.x*base0.y*cn[19];an+=base4.x*cn[20];return an;
}

STATIC_FUNCTION fast_mpvec sum_5(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);an+=base5.z*cn[0];an+=base0.y*base4.z*cn[1];an+=base1.y*base3.z*cn[2];an+=base2.y*base2.z*cn[3];an+=base3.y*base1.z*cn[4];an+=base4.y*base0.z*cn[5];an+=base5.y*cn[6];an+=base0.x*base4.z*cn[7];an+=base0.x*base0.y*base3.z*cn[8];an+=base0.x*base1.y*base2.z*cn[9];an+=base0.x*base2.y*base1.z*cn[10];an+=base0.x*base3.y*base0.z*cn[11];an+=base0.x*base4.y*cn[12];an+=base1.x*base3.z*cn[13];an+=base1.x*base0.y*base2.z*cn[14];an+=base1.x*base1.y*base1.z*cn[15];an+=base1.x*base2.y*base0.z*cn[16];an+=base1.x*base3.y*cn[17];an+=base2.x*base2.z*cn[18];an+=base2.x*base0.y*base1.z*cn[19];an+=base2.x*base1.y*base0.z*cn[20];an+=base2.x*base2.y*cn[21];an+=base3.x*base1.z*cn[22];an+=base3.x*base0.y*base0.z*cn[23];an+=base3.x*base1.y*cn[24];an+=base4.x*base0.z*cn[25];an+=base4.x*base0.y*cn[26];an+=base5.x*cn[27];return an;
}

STATIC_FUNCTION fast_mpvec sum_6(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);an+=base6.z*cn[0];an+=base0.y*base5.z*cn[1];an+=base1.y*base4.z*cn[2];an+=base2.y*base3.z*cn[3];an+=base3.y*base2.z*cn[4];an+=base4.y*base1.z*cn[5];an+=base5.y*base0.z*cn[6];an+=base6.y*cn[7];an+=base0.x*base5.z*cn[8];an+=base0.x*base0.y*base4.z*cn[9];an+=base0.x*base1.y*base3.z*cn[10];an+=base0.x*base2.y*base2.z*cn[11];an+=base0.x*base3.y*base1.z*cn[12];an+=base0.x*base4.y*base0.z*cn[13];an+=base0.x*base5.y*cn[14];an+=base1.x*base4.z*cn[15];an+=base1.x*base0.y*base3.z*cn[16];an+=base1.x*base1.y*base2.z*cn[17];an+=base1.x*base2.y*base1.z*cn[18];an+=base1.x*base3.y*base0.z*cn[19];an+=base1.x*base4.y*cn[20];an+=base2.x*base3.z*cn[21];an+=base2.x*base0.y*base2.z*cn[22];an+=base2.x*base1.y*base1.z*cn[23];an+=base2.x*base2.y*base0.z*cn[24];an+=base2.x*base3.y*cn[25];an+=base3.x*base2.z*cn[26];an+=base3.x*base0.y*base1.z*cn[27];an+=base3.x*base1.y*base0.z*cn[28];an+=base3.x*base2.y*cn[29];an+=base4.x*base1.z*cn[30];an+=base4.x*base0.y*base0.z*cn[31];an+=base4.x*base1.y*cn[32];an+=base5.x*base0.z*cn[33];an+=base5.x*base0.y*cn[34];an+=base6.x*cn[35];return an;
}

STATIC_FUNCTION fast_mpvec sum_7(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);fast_mpvec base7(base6.x*r.x,base6.y*r.y,base6.z*r.z);an+=base7.z*cn[0];an+=base0.y*base6.z*cn[1];an+=base1.y*base5.z*cn[2];an+=base2.y*base4.z*cn[3];an+=base3.y*base3.z*cn[4];an+=base4.y*base2.z*cn[5];an+=base5.y*base1.z*cn[6];an+=base6.y*base0.z*cn[7];an+=base7.y*cn[8];an+=base0.x*base6.z*cn[9];an+=base0.x*base0.y*base5.z*cn[10];an+=base0.x*base1.y*base4.z*cn[11];an+=base0.x*base2.y*base3.z*cn[12];an+=base0.x*base3.y*base2.z*cn[13];an+=base0.x*base4.y*base1.z*cn[14];an+=base0.x*base5.y*base0.z*cn[15];an+=base0.x*base6.y*cn[16];an+=base1.x*base5.z*cn[17];an+=base1.x*base0.y*base4.z*cn[18];an+=base1.x*base1.y*base3.z*cn[19];an+=base1.x*base2.y*base2.z*cn[20];an+=base1.x*base3.y*base1.z*cn[21];an+=base1.x*base4.y*base0.z*cn[22];an+=base1.x*base5.y*cn[23];an+=base2.x*base4.z*cn[24];an+=base2.x*base0.y*base3.z*cn[25];an+=base2.x*base1.y*base2.z*cn[26];an+=base2.x*base2.y*base1.z*cn[27];an+=base2.x*base3.y*base0.z*cn[28];an+=base2.x*base4.y*cn[29];an+=base3.x*base3.z*cn[30];an+=base3.x*base0.y*base2.z*cn[31];an+=base3.x*base1.y*base1.z*cn[32];an+=base3.x*base2.y*base0.z*cn[33];an+=base3.x*base3.y*cn[34];an+=base4.x*base2.z*cn[35];an+=base4.x*base0.y*base1.z*cn[36];an+=base4.x*base1.y*base0.z*cn[37];an+=base4.x*base2.y*cn[38];an+=base5.x*base1.z*cn[39];an+=base5.x*base0.y*base0.z*cn[40];an+=base5.x*base1.y*cn[41];an+=base6.x*base0.z*cn[42];an+=base6.x*base0.y*cn[43];an+=base7.x*cn[44];return an;
}

STATIC_FUNCTION fast_mpvec sum_8(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);fast_mpvec base7(base6.x*r.x,base6.y*r.y,base6.z*r.z);fast_mpvec base8(base7.x*r.x,base7.y*r.y,base7.z*r.z);an+=base8.z*cn[0];an+=base0.y*base7.z*cn[1];an+=base1.y*base6.z*cn[2];an+=base2.y*base5.z*cn[3];an+=base3.y*base4.z*cn[4];an+=base4.y*base3.z*cn[5];an+=base5.y*base2.z*cn[6];an+=base6.y*base1.z*cn[7];an+=base7.y*base0.z*cn[8];an+=base8.y*cn[9];an+=base0.x*base7.z*cn[10];an+=base0.x*base0.y*base6.z*cn[11];an+=base0.x*base1.y*base5.z*cn[12];an+=base0.x*base2.y*base4.z*cn[13];an+=base0.x*base3.y*base3.z*cn[14];an+=base0.x*base4.y*base2.z*cn[15];an+=base0.x*base5.y*base1.z*cn[16];an+=base0.x*base6.y*base0.z*cn[17];an+=base0.x*base7.y*cn[18];an+=base1.x*base6.z*cn[19];an+=base1.x*base0.y*base5.z*cn[20];an+=base1.x*base1.y*base4.z*cn[21];an+=base1.x*base2.y*base3.z*cn[22];an+=base1.x*base3.y*base2.z*cn[23];an+=base1.x*base4.y*base1.z*cn[24];an+=base1.x*base5.y*base0.z*cn[25];an+=base1.x*base6.y*cn[26];an+=base2.x*base5.z*cn[27];an+=base2.x*base0.y*base4.z*cn[28];an+=base2.x*base1.y*base3.z*cn[29];an+=base2.x*base2.y*base2.z*cn[30];an+=base2.x*base3.y*base1.z*cn[31];an+=base2.x*base4.y*base0.z*cn[32];an+=base2.x*base5.y*cn[33];an+=base3.x*base4.z*cn[34];an+=base3.x*base0.y*base3.z*cn[35];an+=base3.x*base1.y*base2.z*cn[36];an+=base3.x*base2.y*base1.z*cn[37];an+=base3.x*base3.y*base0.z*cn[38];an+=base3.x*base4.y*cn[39];an+=base4.x*base3.z*cn[40];an+=base4.x*base0.y*base2.z*cn[41];an+=base4.x*base1.y*base1.z*cn[42];an+=base4.x*base2.y*base0.z*cn[43];an+=base4.x*base3.y*cn[44];an+=base5.x*base2.z*cn[45];an+=base5.x*base0.y*base1.z*cn[46];an+=base5.x*base1.y*base0.z*cn[47];an+=base5.x*base2.y*cn[48];an+=base6.x*base1.z*cn[49];an+=base6.x*base0.y*base0.z*cn[50];an+=base6.x*base1.y*cn[51];an+=base7.x*base0.z*cn[52];an+=base7.x*base0.y*cn[53];an+=base8.x*cn[54];return an;
}

STATIC_FUNCTION fast_mpvec sum_J2(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_real zbase;an.z+=base2.z*cn[0].z;an.y+=base0.y*base1.z*cn[1].y;an.z+=base1.y*base0.z*cn[2].z;an.y+=base2.y*cn[3].y;an.x+=base0.x*base1.z*cn[4].x;an.x+=base0.x*base1.y*cn[6].x;an.z+=base1.x*base0.z*cn[7].z;an.y+=base1.x*base0.y*cn[8].y;an.x+=base2.x*cn[9].x;return an;
}

STATIC_FUNCTION fast_mpvec sum_J3(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_real zbase;an.z+=base3.z*cn[0].z;an.y+=base0.y*base2.z*cn[1].y;an.z+=base1.y*base1.z*cn[2].z;an.y+=base2.y*base0.z*cn[3].y;an.z+=base3.y*cn[4].z;an.x+=base0.x*base2.z*cn[5].x;an.x+=base0.x*base1.y*base0.z*cn[7].x;an.z+=base1.x*base1.z*cn[9].z;an.y+=base1.x*base0.y*base0.z*cn[10].y;an.z+=base1.x*base1.y*cn[11].z;an.x+=base2.x*base0.z*cn[12].x;an.z+=base3.x*cn[14].z;return an;
}

STATIC_FUNCTION fast_mpvec sum_J4(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_real zbase;an.z+=base4.z*cn[0].z;an.y+=base0.y*base3.z*cn[1].y;an.z+=base1.y*base2.z*cn[2].z;an.y+=base2.y*base1.z*cn[3].y;an.z+=base3.y*base0.z*cn[4].z;an.y+=base4.y*cn[5].y;an.x+=base0.x*base3.z*cn[6].x;an.x+=base0.x*base1.y*base1.z*cn[8].x;an.x+=base0.x*base3.y*cn[10].x;an.z+=base1.x*base2.z*cn[11].z;an.y+=base1.x*base0.y*base1.z*cn[12].y;an.z+=base1.x*base1.y*base0.z*cn[13].z;an.y+=base1.x*base2.y*cn[14].y;an.x+=base2.x*base1.z*cn[15].x;an.x+=base2.x*base1.y*cn[17].x;an.z+=base3.x*base0.z*cn[18].z;an.y+=base3.x*base0.y*cn[19].y;an.x+=base4.x*cn[20].x;return an;
}

STATIC_FUNCTION fast_mpvec sum_J5(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_real zbase;an.z+=base5.z*cn[0].z;an.y+=base0.y*base4.z*cn[1].y;an.z+=base1.y*base3.z*cn[2].z;an.y+=base2.y*base2.z*cn[3].y;an.z+=base3.y*base1.z*cn[4].z;an.y+=base4.y*base0.z*cn[5].y;an.z+=base5.y*cn[6].z;an.x+=base0.x*base4.z*cn[7].x;an.x+=base0.x*base1.y*base2.z*cn[9].x;an.x+=base0.x*base3.y*base0.z*cn[11].x;an.z+=base1.x*base3.z*cn[13].z;an.y+=base1.x*base0.y*base2.z*cn[14].y;an.z+=base1.x*base1.y*base1.z*cn[15].z;an.y+=base1.x*base2.y*base0.z*cn[16].y;an.z+=base1.x*base3.y*cn[17].z;an.x+=base2.x*base2.z*cn[18].x;an.x+=base2.x*base1.y*base0.z*cn[20].x;an.z+=base3.x*base1.z*cn[22].z;an.y+=base3.x*base0.y*base0.z*cn[23].y;an.z+=base3.x*base1.y*cn[24].z;an.x+=base4.x*base0.z*cn[25].x;an.z+=base5.x*cn[27].z;return an;
}

STATIC_FUNCTION fast_mpvec sum_J6(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);fast_real zbase;an.z+=base6.z*cn[0].z;an.y+=base0.y*base5.z*cn[1].y;an.z+=base1.y*base4.z*cn[2].z;an.y+=base2.y*base3.z*cn[3].y;an.z+=base3.y*base2.z*cn[4].z;an.y+=base4.y*base1.z*cn[5].y;an.z+=base5.y*base0.z*cn[6].z;an.y+=base6.y*cn[7].y;an.x+=base0.x*base5.z*cn[8].x;an.x+=base0.x*base1.y*base3.z*cn[10].x;an.x+=base0.x*base3.y*base1.z*cn[12].x;an.x+=base0.x*base5.y*cn[14].x;an.z+=base1.x*base4.z*cn[15].z;an.y+=base1.x*base0.y*base3.z*cn[16].y;an.z+=base1.x*base1.y*base2.z*cn[17].z;an.y+=base1.x*base2.y*base1.z*cn[18].y;an.z+=base1.x*base3.y*base0.z*cn[19].z;an.y+=base1.x*base4.y*cn[20].y;an.x+=base2.x*base3.z*cn[21].x;an.x+=base2.x*base1.y*base1.z*cn[23].x;an.x+=base2.x*base3.y*cn[25].x;an.z+=base3.x*base2.z*cn[26].z;an.y+=base3.x*base0.y*base1.z*cn[27].y;an.z+=base3.x*base1.y*base0.z*cn[28].z;an.y+=base3.x*base2.y*cn[29].y;an.x+=base4.x*base1.z*cn[30].x;an.x+=base4.x*base1.y*cn[32].x;an.z+=base5.x*base0.z*cn[33].z;an.y+=base5.x*base0.y*cn[34].y;an.x+=base6.x*cn[35].x;return an;
}

STATIC_FUNCTION fast_mpvec sum_J7(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);fast_mpvec base7(base6.x*r.x,base6.y*r.y,base6.z*r.z);fast_real zbase;an.z+=base7.z*cn[0].z;an.y+=base0.y*base6.z*cn[1].y;an.z+=base1.y*base5.z*cn[2].z;an.y+=base2.y*base4.z*cn[3].y;an.z+=base3.y*base3.z*cn[4].z;an.y+=base4.y*base2.z*cn[5].y;an.z+=base5.y*base1.z*cn[6].z;an.y+=base6.y*base0.z*cn[7].y;an.z+=base7.y*cn[8].z;an.x+=base0.x*base6.z*cn[9].x;an.x+=base0.x*base1.y*base4.z*cn[11].x;an.x+=base0.x*base3.y*base2.z*cn[13].x;an.x+=base0.x*base5.y*base0.z*cn[15].x;an.z+=base1.x*base5.z*cn[17].z;an.y+=base1.x*base0.y*base4.z*cn[18].y;an.z+=base1.x*base1.y*base3.z*cn[19].z;an.y+=base1.x*base2.y*base2.z*cn[20].y;an.z+=base1.x*base3.y*base1.z*cn[21].z;an.y+=base1.x*base4.y*base0.z*cn[22].y;an.z+=base1.x*base5.y*cn[23].z;an.x+=base2.x*base4.z*cn[24].x;an.x+=base2.x*base1.y*base2.z*cn[26].x;an.x+=base2.x*base3.y*base0.z*cn[28].x;an.z+=base3.x*base3.z*cn[30].z;an.y+=base3.x*base0.y*base2.z*cn[31].y;an.z+=base3.x*base1.y*base1.z*cn[32].z;an.y+=base3.x*base2.y*base0.z*cn[33].y;an.z+=base3.x*base3.y*cn[34].z;an.x+=base4.x*base2.z*cn[35].x;an.x+=base4.x*base1.y*base0.z*cn[37].x;an.z+=base5.x*base1.z*cn[39].z;an.y+=base5.x*base0.y*base0.z*cn[40].y;an.z+=base5.x*base1.y*cn[41].z;an.x+=base6.x*base0.z*cn[42].x;an.z+=base7.x*cn[44].z;return an;
}

STATIC_FUNCTION fast_mpvec sum_J8(const fast_mpvec &r,const fast_mpvec *cn){
    fast_mpvec base0(r),an(0);fast_mpvec base1(base0.x*r.x,base0.y*r.y,base0.z*r.z);fast_mpvec base2(base1.x*r.x,base1.y*r.y,base1.z*r.z);fast_mpvec base3(base2.x*r.x,base2.y*r.y,base2.z*r.z);fast_mpvec base4(base3.x*r.x,base3.y*r.y,base3.z*r.z);fast_mpvec base5(base4.x*r.x,base4.y*r.y,base4.z*r.z);fast_mpvec base6(base5.x*r.x,base5.y*r.y,base5.z*r.z);fast_mpvec base7(base6.x*r.x,base6.y*r.y,base6.z*r.z);fast_mpvec base8(base7.x*r.x,base7.y*r.y,base7.z*r.z);fast_real zbase;an.z+=base8.z*cn[0].z;an.y+=base0.y*base7.z*cn[1].y;an.z+=base1.y*base6.z*cn[2].z;an.y+=base2.y*base5.z*cn[3].y;an.z+=base3.y*base4.z*cn[4].z;an.y+=base4.y*base3.z*cn[5].y;an.z+=base5.y*base2.z*cn[6].z;an.y+=base6.y*base1.z*cn[7].y;an.z+=base7.y*base0.z*cn[8].z;an.y+=base8.y*cn[9].y;an.x+=base0.x*base7.z*cn[10].x;an.x+=base0.x*base1.y*base5.z*cn[12].x;an.x+=base0.x*base3.y*base3.z*cn[14].x;an.x+=base0.x*base5.y*base1.z*cn[16].x;an.x+=base0.x*base7.y*cn[18].x;an.z+=base1.x*base6.z*cn[19].z;an.y+=base1.x*base0.y*base5.z*cn[20].y;an.z+=base1.x*base1.y*base4.z*cn[21].z;an.y+=base1.x*base2.y*base3.z*cn[22].y;an.z+=base1.x*base3.y*base2.z*cn[23].z;an.y+=base1.x*base4.y*base1.z*cn[24].y;an.z+=base1.x*base5.y*base0.z*cn[25].z;an.y+=base1.x*base6.y*cn[26].y;an.x+=base2.x*base5.z*cn[27].x;an.x+=base2.x*base1.y*base3.z*cn[29].x;an.x+=base2.x*base3.y*base1.z*cn[31].x;an.x+=base2.x*base5.y*cn[33].x;an.z+=base3.x*base4.z*cn[34].z;an.y+=base3.x*base0.y*base3.z*cn[35].y;an.z+=base3.x*base1.y*base2.z*cn[36].z;an.y+=base3.x*base2.y*base1.z*cn[37].y;an.z+=base3.x*base3.y*base0.z*cn[38].z;an.y+=base3.x*base4.y*cn[39].y;an.x+=base4.x*base3.z*cn[40].x;an.x+=base4.x*base1.y*base1.z*cn[42].x;an.x+=base4.x*base3.y*cn[44].x;an.z+=base5.x*base2.z*cn[45].z;an.y+=base5.x*base0.y*base1.z*cn[46].y;an.z+=base5.x*base1.y*base0.z*cn[47].z;an.y+=base5.x*base2.y*cn[48].y;an.x+=base6.x*base1.z*cn[49].x;an.x+=base6.x*base1.y*cn[51].x;an.z+=base7.x*base0.z*cn[52].z;an.y+=base7.x*base0.y*cn[53].y;an.x+=base8.x*cn[54].x;return an;
}


STATIC_FUNCTION fast_mpvec(*const sum_Jn_funlist[])(const fast_mpvec &,const fast_mpvec *)={
    nullptr,nullptr,
    sum_J2,
    sum_J3,
    sum_J4,
    sum_J5,
    sum_J6,
    sum_J7,
    sum_J8
};

STATIC_FUNCTION fast_mpvec(*const sum_n_funlist[])(const fast_mpvec &,const fast_mpvec *)={
    nullptr,nullptr,
    sum_2,
    sum_3,
    sum_4,
    sum_5,
    sum_6,
    sum_7,
    sum_8
};
#endif


FUNCTION fast_mpvec geopotential::SUM_FUNCTION(fast_real R,fast_mpvec r,int_t N_start,int_t N_end) const{
    fast_real x=r.x,y=r.y,z=r.z;
    fast_real rr2=1/(r%r);
    fast_real rr=sqrt(rr2);
    fast_real R_r2=R*rr2;

    if(N_start<2)N_start=2;
    if(N_end<0||N_end>N)N_end=N;

    fast_mpvec a(0);
    for(int_t n=N_end;n>=1;--n){
        if(n>=N_start){
            a+=(n>Nt?sum_Jn_funlist:sum_n_funlist)[n](r,c_table+Precompute_Table_size(n-1));
        }
        a*=R_r2;
    }
    a*=-rr2*rr;

    return a;
}
#else

//we support at most order 8 harmonics...
static const int_t Max_N=8;
#define do_swap(v1,v2) do{fast_real _v;_v=v1;v1=v2;v2=_v;}while(0)
//static const int_t Precompute_Table_size[1+Max_N]={0, 0, 5, 12, 21, 32, 45, 60, 77};
#define Precompute_Table_size(n) ((n)*((n)+2)-3)
#define J(n) ((n)*(n)-4)
#define C(n,m) (J(n)+2*(m)-1)
#define S(n,m) (J(n)+2*(m))

FUNCTION fast_mpvec geopotential::SUM_FUNCTION(fast_real R,fast_mpvec r) const{
    fast_real rho2=r.x*r.x+r.y*r.y;
    fast_real rr2=1/(rho2+r.z*r.z);
    fast_real rho1=sqrt(rho2);
    fast_real rr1=sqrt(rr2);
    fast_real rb1=R*rr1;
    fast_real rbn=rb1;
    fast_real cphi=rho1*rr1;
    fast_real sphi=r.z*rr1;
    fast_real cm,sm;
    if(rho1==0){
        cm=1;
        sm=0;
    }
    else{
        cm=r.x/rho1;
        sm=r.y/rho1;
    }
    fast_real pnm[Max_N],pn1m[Max_N];
    pnm[0]=0;
    pn1m[0]=1;
    fast_real ppn=1,pn=1,pn1=sphi;

    fast_real zx=0,zz=0;// zonal
    fast_mpvec t(0);// tesseral

    for(int_t n=2;n<=Nz;++n){
        rbn*=rb1;
        const fast_real *JCSn=c_table+J(n);

        //zonal
        pn=((2*n-1)*sphi*pn1-(n-1)*pn)/n;
        ppn=sphi*ppn+n*pn1;
        fast_real z1=JCSn[0]*rbn;
        zx+=(n+1)*z1*pn;
        zz-=z1*ppn;
        do_swap(pn,pn1);

        if(n>Nt)continue;
        //tesseral
        fast_mpvec f(0);
        fast_real m1=(2*n-1)*sphi;
        fast_real m2=-n*sphi;
        fast_real smm,cmm,smm1,cmm1;
        for(int_t m=1;m<=n;++m){
            if(m==n){
                pn1m[m-1]=0;
                pnm[m-1]=(2*n-1)*cphi*pnm[m-2];
            }
            else pnm[m-1]=(m1*pn1m[m-1]-(n+m-1)*pnm[m-1])/(n-m);
            if(m==1){
                smm=sm;
                cmm=cm;
                smm1=0;
                cmm1=1;
            }
            else{
                smm=2*cm*smm1-smm;
                cmm=2*cm*cmm1-cmm;
            }
            fast_real t1=JCSn[2*m]*smm+JCSn[2*m-1]*cmm;
            fast_real t2=JCSn[2*m]*cmm-JCSn[2*m-1]*smm;
            fast_real ppnm=m2*pnm[m-1]+(n+m)*pn1m[m-1];
            f.x+=t1*pnm[m-1];
            f.y+=m*t2*pnm[m-1];
            f.z+=t1*ppnm;
            do_swap(cmm,cmm1);
            do_swap(smm,smm1);
            do_swap(pnm[m-1],pn1m[m-1]);
        }
        f.x*=n+1;
        t+=rbn*f;
    }

    t.x=zx-cphi*t.x;
    t.z+=zz*cphi;
    t*=rr2;
    fast_real g1=t.x*cphi-t.z*sphi;
    fast_mpvec g(g1*cm-t.y*sm,g1*sm+t.y*cm,cphi*t.z+sphi*t.x);
    return g;
}
#endif